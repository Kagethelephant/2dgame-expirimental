<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//We can handle the scenarios 2 ways, 
//1 we can use a global variable 
//2 we can use public and just access it via a with() statment - IMO Best option
scenario = 0; // Inititalizing the public variable as long as this object stays "Persistant" this number should only reset on restart
lv2 = 0; //in adition we will also need these variables to know which branch
lv3 = 0;

scr_script_database();

text = 'null';
ans1 = 'null';
ans2 = 'null';
ans3 = 'null';
ans4 = 'null';

view_hview = 420;
view_wview = view_hview*(display_get_width()/display_get_height());

// player variables
food = 100;
ammo = 100;
hp = 100;


//box test
ex_val = 10;
ex_w = 300;
ex_h = 200;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(keyboard_check_pressed(vk_escape))game_end();

//set main text
if(lv2=0 &amp;&amp; lv3=0)text = array_script[scenario,0];
else if(lv2 != 0 &amp;&amp; lv3 = 0) text = array_script[scenario,lv2*5];
else text = array_script[scenario,(lv2*20+lv3*5)];

//set answer1
if(lv2=0 &amp;&amp; lv3=0)ans1 = array_script[scenario,1];
else if(lv2 != 0 &amp;&amp; lv3 = 0) ans1 = array_script[scenario,1+lv2*5];
else ans1 = array_script[scenario,1+lv2*20+lv3*5];

//set answer2 
if(lv2=0 &amp;&amp; lv3=0)ans2 = array_script[scenario,2];
else if(lv2 != 0 &amp;&amp; lv3 = 0) ans2 = array_script[scenario,2+lv2*5];
else ans2 = array_script[scenario,2+lv2*20+lv3*5];
      
//set answer3
if(lv2=0 &amp;&amp; lv3=0)ans3 = array_script[scenario,3];
else if(lv2 != 0 &amp;&amp; lv3 = 0) ans3 = array_script[scenario,3+lv2*5];
else ans3 = array_script[scenario,3+lv2*20+lv3*5];

//set answer2 
if(lv2=0 &amp;&amp; lv3=0)ans4 = array_script[scenario,4];
else if(lv2 != 0 &amp;&amp; lv3 = 0) ans4 = array_script[scenario,4+lv2*5];
else ans4 = array_script[scenario,4+lv2*20+lv3*5];

//end actions
scr_end_action();
 

//box size test stuff   
if(keyboard_check_pressed(vk_enter))
    {
    if(ex_val = 10)ex_val = 20;
    else if(ex_val = 20)ex_val = 10;
    }
if(keyboard_check_pressed(vk_left))ex_w-=ex_val;
if(keyboard_check_pressed(vk_right))ex_w+=ex_val;
if(keyboard_check_pressed(vk_up))ex_h+=ex_val;
if(keyboard_check_pressed(vk_down))ex_h-=ex_val;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_black);
draw_rectangle(view_xview,view_yview,view_xview+view_wview,view_yview+view_hview,false);

draw_set_color(c_white);
draw_rectangle(view_xview,view_yview,view_xview+10,view_yview+10,false);
draw_rectangle(view_xview+view_wview-10,view_yview+view_hview-10,view_xview+view_wview,view_yview+view_hview,false);

draw_set_font(fnt_main);
draw_text(view_xview+view_wview/2-20,view_yview+view_hview/2,string(text));
draw_text(view_xview+view_wview/2-20,view_yview+view_hview/2+20,string(ans1));
if(ans2!='null')draw_text(view_xview+view_wview/2-20,view_yview+view_hview/2+40,string(ans2));
if(ans3!='null')draw_text(view_xview+view_wview/2-20,view_yview+view_hview/2+60,string(ans3));
if(ans4!='null')draw_text(view_xview+view_wview/2-20,view_yview+view_hview/2+80,string(ans4));

draw_set_color(c_red);
draw_rectangle(view_wview/2-ex_w/2,view_hview/2-ex_h/2,view_wview/2+ex_w/2,view_hview/2+ex_h/2,false);
draw_text(5,5,"width: "+string(ex_w));
draw_text(5,25,"height: "+string(ex_h));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
